{"ast":null,"code":"var _jsxFileName = \"E:\\\\Thyrve\\\\workflow-frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { message } from 'antd';\nimport { nodeTypes } from './components/Nodes';\nimport Toolbar from './components/Toolbar';\nimport ConfigPanel from './components/ConfigPanel';\nimport WorkflowControls from './components/WorkflowControls';\nimport { executeWorkflow } from './services/api';\nimport './styles/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, [setEdges]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    if (!type) return;\n    const position = {\n      x: event.clientX - 200,\n      y: event.clientY - 40\n    };\n    const newNode = {\n      id: `${type}-${Date.now()}`,\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [setNodes]);\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n  }, []);\n  const onConfigChange = useCallback(config => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === selectedNode.id) {\n        node.data = {\n          ...node.data,\n          ...config\n        };\n      }\n      return node;\n    }));\n  }, [selectedNode, setNodes]);\n  const handleStart = async () => {\n    try {\n      const workflow = {\n        nodes,\n        edges\n      };\n      const result = await executeWorkflow(workflow);\n      message.success('工作流执行成功');\n      console.log('执行结果:', result);\n    } catch (error) {\n      message.error('工作流执行失败');\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"workflow-area\",\n      children: [/*#__PURE__*/_jsxDEV(WorkflowControls, {\n        onStart: handleStart,\n        onSave: () => {},\n        onLoad: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onDrop: onDrop,\n        onDragOver: onDragOver,\n        onNodeClick: onNodeClick,\n        nodeTypes: nodeTypes,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfigPanel, {\n      selectedNode: selectedNode,\n      onConfigChange: onConfigChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eSLcomjI/xX+xYDHW/9G50aB8Lg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","addEdge","Background","Controls","useNodesState","useEdgesState","message","nodeTypes","Toolbar","ConfigPanel","WorkflowControls","executeWorkflow","jsxDEV","_jsxDEV","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","type","getData","position","x","clientX","y","clientY","newNode","id","Date","now","data","label","nds","concat","onNodeClick","_","node","onConfigChange","config","map","handleStart","workflow","result","success","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","onSave","onLoad","_c","$RefreshReg$"],"sources":["E:/Thyrve/workflow-frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport ReactFlow, { \r\n  addEdge, \r\n  Background, \r\n  Controls,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { message } from 'antd';\r\nimport { nodeTypes } from './components/Nodes';\r\nimport Toolbar from './components/Toolbar';\r\nimport ConfigPanel from './components/ConfigPanel';\r\nimport WorkflowControls from './components/WorkflowControls';\r\nimport { executeWorkflow } from './services/api';\r\nimport './styles/index.css';\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n  const onConnect = useCallback((params) => {\r\n    setEdges((eds) => addEdge(params, eds));\r\n  }, [setEdges]);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n      if (!type) return;\r\n\r\n      const position = {\r\n        x: event.clientX - 200,\r\n        y: event.clientY - 40,\r\n      };\r\n\r\n      const newNode = {\r\n        id: `${type}-${Date.now()}`,\r\n        type,\r\n        position,\r\n        data: { label: `${type} node` },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [setNodes]\r\n  );\r\n\r\n  const onNodeClick = useCallback((_, node) => {\r\n    setSelectedNode(node);\r\n  }, []);\r\n\r\n  const onConfigChange = useCallback((config) => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === selectedNode.id) {\r\n          node.data = { ...node.data, ...config };\r\n        }\r\n        return node;\r\n      })\r\n    );\r\n  }, [selectedNode, setNodes]);\r\n\r\n  const handleStart = async () => {\r\n    try {\r\n      const workflow = { nodes, edges };\r\n      const result = await executeWorkflow(workflow);\r\n      message.success('工作流执行成功');\r\n      console.log('执行结果:', result);\r\n    } catch (error) {\r\n      message.error('工作流执行失败');\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Toolbar />\r\n      <div className=\"workflow-area\">\r\n        <WorkflowControls\r\n          onStart={handleStart}\r\n          onSave={() => {}}\r\n          onLoad={() => {}}\r\n        />\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          onDrop={onDrop}\r\n          onDragOver={onDragOver}\r\n          onNodeClick={onNodeClick}\r\n          nodeTypes={nodeTypes}\r\n        >\r\n          <Background />\r\n          <Controls />\r\n        </ReactFlow>\r\n      </div>\r\n      <ConfigPanel\r\n        selectedNode={selectedNode}\r\n        onConfigChange={onConfigChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}