{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\Thryve\\\\Demos\\\\Demo2byYWT\\\\Thyrve\\\\workflow-frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, useNodesState, useEdgesState } from 'reactflow';\nimport { message } from 'antd';\nimport { nodeTypes } from './components/Nodes';\nimport Toolbar from './components/Toolbar';\nimport ConfigPanel from './components/ConfigPanel';\nimport WorkflowControls from './components/WorkflowControls';\nimport { executeWorkflow } from './services/api';\nimport 'reactflow/dist/style.css';\nimport './styles/index.css';\nimport OutputConsole from './components/OutputConsole'; // 新增\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  // 保存流程\n  const handleSave = useCallback(() => {\n    try {\n      const workflow = {\n        nodes,\n        edges,\n        version: '1.0',\n        // 版本号，方便未来扩展\n        savedAt: new Date().toISOString()\n      };\n      // 创建Blob并下载\n      const blob = new Blob([JSON.stringify(workflow, null, 2)], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `workflow-${new Date().getTime()}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      message.success('工作流程已保存');\n    } catch (error) {\n      console.error('保存失败:', error);\n      message.error('保存失败: ' + error.message);\n    }\n  }, [nodes, edges]);\n\n  // 加载流程\n  const handleLoad = useCallback(file => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const workflow = JSON.parse(e.target.result);\n        // 验证文件格式\n        if (!workflow.nodes || !workflow.edges) {\n          throw new Error('无效的工作流程文件');\n        }\n        // 加载节点和连线\n        setNodes(workflow.nodes);\n        setEdges(workflow.edges);\n        message.success('工作流程已加载');\n      } catch (error) {\n        console.error('加载失败:', error);\n        message.error('加载失败: ' + error.message);\n      }\n    };\n    reader.readAsText(file);\n  }, [setNodes, setEdges]);\n\n  // 节点删除逻辑处理\n  const onNodesDelete = useCallback(nodesToDelete => {\n    const nodeIdsToDelete = nodesToDelete.map(node => node.id);\n    setEdges(eds => eds.filter(edge => !nodeIdsToDelete.includes(edge.source) && !nodeIdsToDelete.includes(edge.target)));\n  }, [setEdges]);\n\n  // 连线删除逻辑处理\n  const onEdgesDelete = useCallback(edgesToDelete => {}, []);\n\n  // 连线连接逻辑处理\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, [setEdges]);\n\n  // 拖拽上传逻辑处理\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  // 节点点击事件处理\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const type = event.dataTransfer.getData('application/reactflow');\n    if (!type) return;\n    const position = {\n      x: event.clientX - 200,\n      y: event.clientY - 40\n    };\n    const newNode = {\n      id: `${type}-${Date.now()}`,\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [setNodes]);\n  const onNodeClick = useCallback((_, node) => {\n    setSelectedNode(node);\n  }, []);\n\n  // 不要使用自定义的删除功能\n  // // 添加键盘删除功能\n  // const onKeyDown = useCallback((event) => {\n  //   if (event.key === 'Delete') {\n\n  //     const selectedNodes = nodes.filter(node => node.selected);\n  //     const selectedEdges = edges.filter(edge => edge.selected);\n\n  //     if (selectedNodes.length > 0 || selectedEdges.length > 0) {\n  //       setNodes(nodes.filter(node => !node.selected));\n  //       setEdges(edges.filter(edge => !edge.selected));\n  //       message.info('已删除选中的项目');\n  //     }\n  //   }\n  // }, [nodes, edges, setNodes, setEdges]);\n\n  const handleStart = async () => {\n    try {\n      window.Log('开始执行', 'info');\n      // 获取全部的节点 准备发送\n      const workflow = {\n        nodes,\n        edges\n      };\n      const result = await executeWorkflow(workflow);\n      // 值的一提 这里的result是个response对象 其构成为\n      // {\n      //   data: {\n      //     .....\n      //   },\n      //   status: 200,\n      //   statusText: 'OK',\n      //   headers: {...},\n      //   config: {...},\n      //   request: {...}\n      // }\n      // data里面才是返回的结果 其他的都是自动的处理\n      // 比如我python里面返回的是return jsonify({\"status\": \"success\", \"data\": result})\n      // 那么这里的result就是的 data：{{\"status\": \"success\", \"data\": result}}\n      console.log(result);\n      if (result.data[\"status\"] === 'error') {\n        window.Log(`执行失败: ${result.data[\"message\"]}`, 'error');\n      } else {\n        window.Log(`执行成功`, 'info');\n        // 遍历 result.data[\"data\"] 数组并打印每个元素的第二个值\n        result.data[\"data\"].forEach(item => {\n          for (let key in item) {\n            if (item.hasOwnProperty(key)) {\n              window.Log(`${key}: ${item[key]}`, 'info');\n            }\n          }\n        });\n      }\n    } catch (error) {\n      var _error$response;\n      // 这里一般是不会调用的 如果发生了 说明代码出错了 或者接口返回了错误\n      // 因为返回值中是存在status字段的\n      window.Log(`执行失败: ${error.message}`, 'error');\n      window.Log(`错误详情: ${(_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data}`, 'error');\n    }\n  };\n\n  /////////////////////////////////////////////////////////////////\n  // Zhang Ruixin added this code to validate the connection\n  // 设计了一个兼容表 \n  // 如果类型相同 那么可以连接\n  // 否则不能连接\n  // 后续解决可能需要使用正则表达式\n\n  const validConnectionMap = {\n    'workflow_output': ['workflow_input'],\n    'workflow_input': ['workflow_output'],\n    'workflow_output_loopbody': ['workflow_input']\n  };\n  const isValidConnection = useCallback(({\n    source,\n    target,\n    sourceHandle,\n    targetHandle\n  }) => {\n    var _validConnectionMap$s;\n    // window.Log(`source: ${source}, target: ${target}, sourceHandle: ${sourceHandle}, targetHandle: ${targetHandle}`, 'info');\n\n    // 如果不匹配 那么直接删除\n    if (!((_validConnectionMap$s = validConnectionMap[sourceHandle]) !== null && _validConnectionMap$s !== void 0 && _validConnectionMap$s.includes(targetHandle))) {\n      return false;\n    }\n    // 对于workflow_output 不能重复连接 但是workflow_input也许可以重复连接\n    const targetAlreadyConnected = edges.some(edge => edge.source === source && edge.sourceHandle === 'workflow_output');\n    return !targetAlreadyConnected;\n  }, [edges]);\n\n  /////////////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    tabIndex: 0\n    // 使用原生的API方便调用\n    // onKeyDown={onKeyDown}\n    ,\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"workflow-area\",\n      children: [/*#__PURE__*/_jsxDEV(WorkflowControls, {\n        onStart: handleStart,\n        onSave: handleSave,\n        onLoad: handleLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onNodesDelete: onNodesDelete,\n        onEdgesDelete: onEdgesDelete,\n        onConnect: onConnect,\n        onDrop: onDrop,\n        onDragOver: onDragOver,\n        onNodeClick: onNodeClick,\n        nodeTypes: nodeTypes,\n        deleteKeyCode: ['Delete'] // 支持Delete和Backspace键删除\n        /////////////////////////////////////////////////////////////////\n\n        // zhang ruixin added this code to validate the connection\n        ,\n\n        isValidConnection: isValidConnection\n        /////////////////////////////////////////////////////////////////\n        ,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OutputConsole, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfigPanel, {\n      selectedNode: selectedNode,\n      onConfigChange: config => {\n        setNodes(nds => nds.map(node => {\n          if (node.id === (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.id)) {\n            node.data = {\n              ...node.data,\n              ...config\n            };\n          }\n          return node;\n        }));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"SyJagD8wtdmJkiVlfL9GBYGxmAU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","addEdge","Background","Controls","useNodesState","useEdgesState","message","nodeTypes","Toolbar","ConfigPanel","WorkflowControls","executeWorkflow","OutputConsole","jsxDEV","_jsxDEV","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","handleSave","workflow","version","savedAt","Date","toISOString","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","link","document","createElement","href","download","getTime","body","appendChild","click","removeChild","revokeObjectURL","success","error","console","handleLoad","file","reader","FileReader","onload","e","parse","target","result","Error","readAsText","onNodesDelete","nodesToDelete","nodeIdsToDelete","map","node","id","eds","filter","edge","includes","source","onEdgesDelete","edgesToDelete","onConnect","params","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","position","x","clientX","y","clientY","newNode","now","data","label","nds","concat","onNodeClick","_","handleStart","window","Log","log","forEach","item","key","hasOwnProperty","_error$response","response","validConnectionMap","isValidConnection","sourceHandle","targetHandle","_validConnectionMap$s","targetAlreadyConnected","some","className","tabIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","onSave","onLoad","deleteKeyCode","onConfigChange","config","_c","$RefreshReg$"],"sources":["D:/Repositories/Thryve/Demos/Demo2byYWT/Thyrve/workflow-frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  Controls,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from 'reactflow';\r\nimport { message } from 'antd';\r\nimport { nodeTypes } from './components/Nodes';\r\nimport Toolbar from './components/Toolbar';\r\nimport ConfigPanel from './components/ConfigPanel';\r\nimport WorkflowControls from './components/WorkflowControls';\r\nimport { executeWorkflow } from './services/api';\r\nimport 'reactflow/dist/style.css';\r\nimport './styles/index.css';\r\nimport OutputConsole from './components/OutputConsole';  // 新增\r\n\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n\r\n  // 保存流程\r\n  const handleSave = useCallback(() => {\r\n    try {\r\n      const workflow = {\r\n        nodes,\r\n        edges,\r\n        version: '1.0', // 版本号，方便未来扩展\r\n        savedAt: new Date().toISOString()\r\n      };\r\n      // 创建Blob并下载\r\n      const blob = new Blob([JSON.stringify(workflow, null, 2)], { type: 'application/json' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `workflow-${new Date().getTime()}.json`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n\r\n      message.success('工作流程已保存');\r\n    } catch (error) {\r\n      console.error('保存失败:', error);\r\n      message.error('保存失败: ' + error.message);\r\n    }\r\n  }, [nodes, edges]);\r\n\r\n  // 加载流程\r\n  const handleLoad = useCallback((file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      try {\r\n        const workflow = JSON.parse(e.target.result);\r\n        // 验证文件格式\r\n        if (!workflow.nodes || !workflow.edges) {\r\n          throw new Error('无效的工作流程文件');\r\n        }\r\n        // 加载节点和连线\r\n        setNodes(workflow.nodes);\r\n        setEdges(workflow.edges);\r\n        message.success('工作流程已加载');\r\n      } catch (error) {\r\n        console.error('加载失败:', error);\r\n        message.error('加载失败: ' + error.message);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  }, [setNodes, setEdges]);\r\n\r\n  // 节点删除逻辑处理\r\n  const onNodesDelete = useCallback((nodesToDelete) => {\r\n    const nodeIdsToDelete = nodesToDelete.map((node) => node.id);\r\n    setEdges((eds) =>\r\n      eds.filter(\r\n        (edge) =>\r\n          !nodeIdsToDelete.includes(edge.source) &&\r\n          !nodeIdsToDelete.includes(edge.target)\r\n      )\r\n    );\r\n  }, [setEdges]);\r\n\r\n  // 连线删除逻辑处理\r\n  const onEdgesDelete = useCallback((edgesToDelete) => {\r\n  }, []);\r\n\r\n  // 连线连接逻辑处理\r\n  const onConnect = useCallback((params) => {\r\n    setEdges((eds) => addEdge(params, eds));\r\n  }, [setEdges]);\r\n\r\n  // 拖拽上传逻辑处理\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  // 节点点击事件处理\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n      if (!type) return;\r\n\r\n      const position = {\r\n        x: event.clientX - 200,\r\n        y: event.clientY - 40,\r\n      };\r\n\r\n      const newNode = {\r\n        id: `${type}-${Date.now()}`,\r\n        type,\r\n        position,\r\n        data: { label: `${type} node` },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [setNodes]\r\n  );\r\n\r\n  const onNodeClick = useCallback((_, node) => {\r\n    setSelectedNode(node);\r\n  }, []);\r\n\r\n\r\n  // 不要使用自定义的删除功能\r\n  // // 添加键盘删除功能\r\n  // const onKeyDown = useCallback((event) => {\r\n  //   if (event.key === 'Delete') {\r\n\r\n  //     const selectedNodes = nodes.filter(node => node.selected);\r\n  //     const selectedEdges = edges.filter(edge => edge.selected);\r\n\r\n  //     if (selectedNodes.length > 0 || selectedEdges.length > 0) {\r\n  //       setNodes(nodes.filter(node => !node.selected));\r\n  //       setEdges(edges.filter(edge => !edge.selected));\r\n  //       message.info('已删除选中的项目');\r\n  //     }\r\n  //   }\r\n  // }, [nodes, edges, setNodes, setEdges]);\r\n\r\n  const handleStart = async () => {\r\n    try {\r\n      window.Log('开始执行', 'info');\r\n      // 获取全部的节点 准备发送\r\n      const workflow = { nodes, edges };\r\n      const result = await executeWorkflow(workflow);\r\n      // 值的一提 这里的result是个response对象 其构成为\r\n      // {\r\n      //   data: {\r\n      //     .....\r\n      //   },\r\n      //   status: 200,\r\n      //   statusText: 'OK',\r\n      //   headers: {...},\r\n      //   config: {...},\r\n      //   request: {...}\r\n      // }\r\n      // data里面才是返回的结果 其他的都是自动的处理\r\n      // 比如我python里面返回的是return jsonify({\"status\": \"success\", \"data\": result})\r\n      // 那么这里的result就是的 data：{{\"status\": \"success\", \"data\": result}}\r\n      console.log(result)\r\n      if (result.data[\"status\"] === 'error') {\r\n        window.Log(`执行失败: ${result.data[\"message\"]}`, 'error');\r\n      } else {\r\n        window.Log(`执行成功`, 'info');\r\n        // 遍历 result.data[\"data\"] 数组并打印每个元素的第二个值\r\n        result.data[\"data\"].forEach(item => {\r\n          for (let key in item) {\r\n            if (item.hasOwnProperty(key)) {\r\n                window.Log(`${key}: ${item[key]}`, 'info');\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      // 这里一般是不会调用的 如果发生了 说明代码出错了 或者接口返回了错误\r\n      // 因为返回值中是存在status字段的\r\n      window.Log(`执行失败: ${error.message}`, 'error');\r\n      window.Log(`错误详情: ${error.response?.data}`, 'error');\r\n    }\r\n  };\r\n\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n  // Zhang Ruixin added this code to validate the connection\r\n  // 设计了一个兼容表 \r\n  // 如果类型相同 那么可以连接\r\n  // 否则不能连接\r\n  // 后续解决可能需要使用正则表达式\r\n\r\n  const validConnectionMap = {\r\n    'workflow_output': ['workflow_input'],\r\n    'workflow_input': ['workflow_output'],\r\n    'workflow_output_loopbody': ['workflow_input'],\r\n  };\r\n  const isValidConnection = useCallback(\r\n    ({ source, target, sourceHandle, targetHandle }) => {\r\n      // window.Log(`source: ${source}, target: ${target}, sourceHandle: ${sourceHandle}, targetHandle: ${targetHandle}`, 'info');\r\n\r\n      // 如果不匹配 那么直接删除\r\n      if (!validConnectionMap[sourceHandle]?.includes(targetHandle)) {\r\n        return false;\r\n      }\r\n      // 对于workflow_output 不能重复连接 但是workflow_input也许可以重复连接\r\n      const targetAlreadyConnected = edges.some(\r\n        edge => edge.source === source\r\n          && edge.sourceHandle === 'workflow_output'\r\n      );\r\n      return !targetAlreadyConnected;\r\n    },\r\n    [edges]\r\n  );\r\n\r\n  /////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n  return (\r\n    <div\r\n      className=\"app-container\"\r\n      tabIndex={0}\r\n    // 使用原生的API方便调用\r\n    // onKeyDown={onKeyDown}\r\n    >\r\n      <Toolbar />\r\n      <div className=\"workflow-area\">\r\n        <WorkflowControls\r\n          onStart={handleStart}\r\n          onSave={handleSave}\r\n          onLoad={handleLoad}\r\n        />\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onNodesDelete={onNodesDelete}\r\n          onEdgesDelete={onEdgesDelete}\r\n          onConnect={onConnect}\r\n          onDrop={onDrop}\r\n          onDragOver={onDragOver}\r\n          onNodeClick={onNodeClick}\r\n          nodeTypes={nodeTypes}\r\n          deleteKeyCode={['Delete']} // 支持Delete和Backspace键删除\r\n          /////////////////////////////////////////////////////////////////\r\n\r\n          // zhang ruixin added this code to validate the connection\r\n\r\n          isValidConnection={isValidConnection}\r\n        /////////////////////////////////////////////////////////////////\r\n        >\r\n          <Background />\r\n          <Controls />\r\n        </ReactFlow>\r\n        <OutputConsole />\r\n      </div>\r\n      <ConfigPanel\r\n        selectedNode={selectedNode}\r\n        onConfigChange={(config) => {\r\n          setNodes((nds) =>\r\n            nds.map((node) => {\r\n              if (node.id === selectedNode?.id) {\r\n                node.data = { ...node.data, ...config };\r\n              }\r\n              return node;\r\n            })\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}