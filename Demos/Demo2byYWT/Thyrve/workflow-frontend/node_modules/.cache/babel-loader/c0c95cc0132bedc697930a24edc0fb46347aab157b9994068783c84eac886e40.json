{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\Thryve\\\\Demos\\\\Demo2byYWT\\\\Thyrve\\\\workflow-frontend\\\\src\\\\components\\\\OutputConsole.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typography } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Text\n} = Typography;\nconst OutputConsole = () => {\n  _s();\n  const [logs, setLogs] = useState([]);\n\n  // ȫ��Log��������������������е���\n  const Log = (message, type = \"info\") => {\n    const logEntry = {\n      id: Date.now(),\n      message,\n      type\n    };\n    setLogs(prevLogs => [...prevLogs, logEntry]);\n  };\n\n  // ��Log�������ص�ȫ��window����ʹ���������������з���\n  useEffect(() => {\n    window.Log = Log;\n    return () => {\n      delete window.Log;\n    };\n  }, []);\n  const getLogColor = type => {\n    switch (type) {\n      case 'error':\n        return 'red';\n      case 'warning':\n        return 'orange';\n      case 'info':\n        return 'blue';\n      default:\n        return 'black';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"output-console\",\n    style: {\n      height: '200px',\n      backgroundColor: '#f0f0f0',\n      overflowY: 'auto',\n      padding: '10px',\n      borderTop: '1px solid #ddd'\n    },\n    children: logs.map(log => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '5px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        strong: true,\n        style: {\n          color: getLogColor(log.type)\n        },\n        children: [\"[\", log.type.toUpperCase(), \"] \", log.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, log.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(OutputConsole, \"6h9FKNtuyCQaVwwdLqmS9omOzEQ=\");\n_c = OutputConsole;\nexport default OutputConsole;\nvar _c;\n$RefreshReg$(_c, \"OutputConsole\");","map":{"version":3,"names":["React","useState","useEffect","Typography","jsxDEV","_jsxDEV","Text","OutputConsole","_s","logs","setLogs","Log","message","type","logEntry","id","Date","now","prevLogs","window","getLogColor","className","style","height","backgroundColor","overflowY","padding","borderTop","children","map","log","marginBottom","strong","color","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Repositories/Thryve/Demos/Demo2byYWT/Thyrve/workflow-frontend/src/components/OutputConsole.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Text } = Typography;\r\n\r\nconst OutputConsole = () => {\r\n  const [logs, setLogs] = useState([]);\r\n\r\n  // ȫ��Log��������������������е���\r\n  const Log = (message, type = \"info\") => {\r\n    const logEntry = {\r\n      id: Date.now(),\r\n      message,\r\n      type\r\n    };\r\n    setLogs(prevLogs => [...prevLogs, logEntry]);\r\n  };\r\n\r\n  // ��Log�������ص�ȫ��window����ʹ���������������з���\r\n  useEffect(() => {\r\n    window.Log = Log;\r\n    return () => {\r\n      delete window.Log;\r\n    };\r\n  }, []);\r\n\r\n  const getLogColor = (type) => {\r\n    switch(type) {\r\n      case 'error': return 'red';\r\n      case 'warning': return 'orange';\r\n      case 'info': return 'blue';\r\n      default: return 'black';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"output-console\" \r\n      style={{\r\n        height: '200px', \r\n        backgroundColor: '#f0f0f0', \r\n        overflowY: 'auto', \r\n        padding: '10px',\r\n        borderTop: '1px solid #ddd'\r\n      }}\r\n    >\r\n      {logs.map(log => (\r\n        <div key={log.id} style={{ marginBottom: '5px' }}>\r\n          <Text strong style={{ color: getLogColor(log.type) }}>\r\n            [{log.type.toUpperCase()}] {log.message}\r\n          </Text>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputConsole;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAM;EAAEC;AAAK,CAAC,GAAGH,UAAU;AAE3B,MAAMI,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMU,GAAG,GAAGA,CAACC,OAAO,EAAEC,IAAI,GAAG,MAAM,KAAK;IACtC,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdL,OAAO;MACPC;IACF,CAAC;IACDH,OAAO,CAACQ,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAEJ,QAAQ,CAAC,CAAC;EAC9C,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACdiB,MAAM,CAACR,GAAG,GAAGA,GAAG;IAChB,OAAO,MAAM;MACX,OAAOQ,MAAM,CAACR,GAAG;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,WAAW,GAAIP,IAAI,IAAK;IAC5B,QAAOA,IAAI;MACT,KAAK,OAAO;QAAE,OAAO,KAAK;MAC1B,KAAK,SAAS;QAAE,OAAO,QAAQ;MAC/B,KAAK,MAAM;QAAE,OAAO,MAAM;MAC1B;QAAS,OAAO,OAAO;IACzB;EACF,CAAC;EAED,oBACER,OAAA;IACEgB,SAAS,EAAC,gBAAgB;IAC1BC,KAAK,EAAE;MACLC,MAAM,EAAE,OAAO;MACfC,eAAe,EAAE,SAAS;MAC1BC,SAAS,EAAE,MAAM;MACjBC,OAAO,EAAE,MAAM;MACfC,SAAS,EAAE;IACb,CAAE;IAAAC,QAAA,EAEDnB,IAAI,CAACoB,GAAG,CAACC,GAAG,iBACXzB,OAAA;MAAkBiB,KAAK,EAAE;QAAES,YAAY,EAAE;MAAM,CAAE;MAAAH,QAAA,eAC/CvB,OAAA,CAACC,IAAI;QAAC0B,MAAM;QAACV,KAAK,EAAE;UAAEW,KAAK,EAAEb,WAAW,CAACU,GAAG,CAACjB,IAAI;QAAE,CAAE;QAAAe,QAAA,GAAC,GACnD,EAACE,GAAG,CAACjB,IAAI,CAACqB,WAAW,CAAC,CAAC,EAAC,IAAE,EAACJ,GAAG,CAAClB,OAAO;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC;IAAC,GAHCR,GAAG,CAACf,EAAE;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIX,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAlDID,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAoDnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}